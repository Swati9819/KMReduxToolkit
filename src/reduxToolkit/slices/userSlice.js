import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import axios from 'axios';

const INITIAL_STATE = {
  loading: false,
  users: [],
  error: '',
};

// Feture of createAsyncThunk;
// It will automatically dispatch lifecycle actions based on returned promise.
// generates pending, fulfilled and rejected action types.
export const fetchUsers = createAsyncThunk('user/fetchUsers', async () => {
  const response = await axios.get(
    'https://jsonplaceholder.typicode.com/users',
  );
  return response.data.map(user => user.name);
});
const userSlice = createSlice({
  name: 'user',
  initialState: INITIAL_STATE,
  // As the async function reducers are not generated by slice, but is generated from outside, so we need to use extraReducers here
  extraReducers: builder => {
    builder.addCase(fetchUsers.pending, state => {
      state.loading = true;
    });
    builder.addCase(fetchUsers.fulfilled, (state, action) => {
      state.loading = false;
      state.users = action.payload;
      state.error = '';
    });
    builder.addCase(fetchUsers.rejected, (state, action) => {
      state.loading = false;
      state.users = [];
      state.error = action.payload;
    });
  },
});

export default userSlice.reducer;
